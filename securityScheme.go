package oas3models

import (
	"encoding/json"
	"fmt"
)

// Defines a security scheme that can be used by the operations. Supported schemes are HTTP authentication, an API key
// (either as a header or as a query parameter), OAuth2's common flows (implicit, password, application and access code)
// as defined in RFC6749, and OpenID Connect Discovery.
type SecuritySchemeDoc struct {

	// REQUIRED. The type of the security scheme. Valid values are "apiKey", "http", "oauth2", "openIdConnect".
	Type SecurityType

	// A short description for security scheme. CommonMark syntax MAY be used for rich text representation.
	Description string

	// 	REQUIRED for apiKey. The name of the header, query or cookie parameter to be used.
	Name string

	// REQUIRED for apiKey. The location of the API key. Valid values are "query", "header" or "cookie".
	In SecurityInRequest

	// REQUIRED for http.
	// The name of the HTTP Authorization scheme to be used in the Authorization header as defined in RFC7235.
	Scheme HTTPAuthScheme

	// For http (bearer). A hint to the client to identify how the bearer token is formatted. Bearer tokens are usually
	// generated by an authorization server, so this information is primarily for documentation purposes.
	BearerFormat string

	// REQUIRED for oauth2. An object containing configuration information for the flow types supported.
	Flows OAuthFlows

	// REQUIRED for openIdConnect.
	// OpenId Connect URL to discover OAuth2 configuration values. This MUST be in the form of a URL.
	OpenIdConnectUrl string
}

func (s *SecuritySchemeDoc) MarshalJSON() (_ []byte, err error) {
	if s.Type == "" {
		return nil, fmt.Errorf("for security schemes, 'type' is required")
	}
	x := make(JSON)
	marshalStrIfLen(string(s.Type), "type", x)
	marshalStrIfLen(s.Description, "description", x)
	if s.Type == SecurityApiKey {
		if s.Name == "" || s.In == "" {
			return nil, fmt.Errorf("for `%v` security schemes, 'name' and 'in' are required", SecurityApiKey)
		}
		marshalStrIfLen(s.Name, "name", x)
		marshalStrIfLen(string(s.In), "in", x)
	} else if s.Type == SecurityHttp {
		if s.Scheme == "" {
			return nil, fmt.Errorf("for `%v` security schemes, 'scheme' is required", SecurityHttp)
		}
		x["scheme"] = []byte(s.Scheme)
		if s.Scheme == AuthBearer {
			marshalStrIfLen(s.BearerFormat, "bearerFormat", x)
		}
	} else if s.Type == SecurityOauth2 {
		if s.Flows == nil {
			return nil, fmt.Errorf("for `%v` security schemes, 'flows' is required", SecurityOauth2)
		}
		for key, value := range s.Flows {
			if value.AuthorizationUrl == "" && (key == OAuthImplicit || key == OAuthAuthorizationCode) {
				return nil, fmt.Errorf(
					"for flows of `%v` security schemes, 'authorizationUrl' is required", SecurityOauth2)
			} else if value.TokenUrl == "" &&
				(key == OAuthPassword || key == OAuthClientCredentials || key == OAuthAuthorizationCode) {
				return nil, fmt.Errorf(
					"for flows of `%v` security schemes, 'tokenUrl' is required", SecurityOauth2)
			}
		}
		var err error
		x["flows"], err = json.Marshal(s.Flows)
		if err != nil {
			return nil, err
		}
	} else if s.Type == SecurityOpenIdConnect {
		if s.OpenIdConnectUrl == "" {
			return nil, fmt.Errorf("for `%v` security schemes, 'openIdConnectUrl is required", SecurityOpenIdConnect)
		}
		marshalStrIfLen(s.OpenIdConnectUrl, "openIdConnectUrl", x)
	}
	return json.Marshal(x)
}
